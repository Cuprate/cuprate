use curve25519_dalek::constants::ED25519_BASEPOINT_POINT;
use std::{collections::HashMap, sync::OnceLock};

use curve25519_dalek::edwards::{CompressedEdwardsY, VartimeEdwardsPrecomputation};
use curve25519_dalek::traits::VartimePrecomputedMultiscalarMul;
use curve25519_dalek::{EdwardsPoint, Scalar};
use monero_serai::H;

static H_PRECOMP: OnceLock<VartimeEdwardsPrecomputation> = OnceLock::new();

static PRECOMPUTED_COMMITMENTS: OnceLock<HashMap<u64, EdwardsPoint>> = OnceLock::new();

#[rustfmt::skip]
const DECOMPOSED_AMOUNT: [u64; 172] = [
    1,                   2,                   3,                   4,                   5,                   6,                   7,                   8,                   9,
    10,                  20,                  30,                  40,                  50,                  60,                  70,                  80,                  90,
    100,                 200,                 300,                 400,                 500,                 600,                 700,                 800,                 900,
    1000,                2000,                3000,                4000,                5000,                6000,                7000,                8000,                9000,
    10000,               20000,               30000,               40000,               50000,               60000,               70000,               80000,               90000,
    100000,              200000,              300000,              400000,              500000,              600000,              700000,              800000,              900000,
    1000000,             2000000,             3000000,             4000000,             5000000,             6000000,             7000000,             8000000,             9000000,
    10000000,            20000000,            30000000,            40000000,            50000000,            60000000,            70000000,            80000000,            90000000,
    100000000,           200000000,           300000000,           400000000,           500000000,           600000000,           700000000,           800000000,           900000000,
    1000000000,          2000000000,          3000000000,          4000000000,          5000000000,          6000000000,          7000000000,          8000000000,          9000000000,
    10000000000,         20000000000,         30000000000,         40000000000,         50000000000,         60000000000,         70000000000,         80000000000,         90000000000,
    100000000000,        200000000000,        300000000000,        400000000000,        500000000000,        600000000000,        700000000000,        800000000000,        900000000000,
    1000000000000,       2000000000000,       3000000000000,       4000000000000,       5000000000000,       6000000000000,       7000000000000,       8000000000000,       9000000000000,
    10000000000000,      20000000000000,      30000000000000,      40000000000000,      50000000000000,      60000000000000,      70000000000000,      80000000000000,      90000000000000,
    100000000000000,     200000000000000,     300000000000000,     400000000000000,     500000000000000,     600000000000000,     700000000000000,     800000000000000,     900000000000000,
    1000000000000000,    2000000000000000,    3000000000000000,    4000000000000000,    5000000000000000,    6000000000000000,    7000000000000000,    8000000000000000,    9000000000000000,
    10000000000000000,   20000000000000000,   30000000000000000,   40000000000000000,   50000000000000000,   60000000000000000,   70000000000000000,   80000000000000000,   90000000000000000,
    100000000000000000,  200000000000000000,  300000000000000000,  400000000000000000,  500000000000000000,  600000000000000000,  700000000000000000,  800000000000000000,  900000000000000000,
    1000000000000000000, 2000000000000000000, 3000000000000000000, 4000000000000000000, 5000000000000000000, 6000000000000000000, 7000000000000000000, 8000000000000000000, 9000000000000000000,
    10000000000000000000
];

fn h_precomp() -> &'static VartimeEdwardsPrecomputation {
    H_PRECOMP.get_or_init(|| VartimeEdwardsPrecomputation::new([H(), ED25519_BASEPOINT_POINT]))
}

fn precomputed_commitments() -> &'static HashMap<u64, EdwardsPoint> {
    PRECOMPUTED_COMMITMENTS.get_or_init(|| {
        DECOMPOSED_AMOUNT
            .iter()
            .map(|&amount| {
                (
                    amount,
                    (ED25519_BASEPOINT_POINT + H() * Scalar::from(amount)),
                )
            })
            .collect()
    })
}

pub fn compute_zero_commitment(amount: u64) -> EdwardsPoint {
    precomputed_commitments()
        .get(&amount)
        .copied()
        .unwrap_or_else(|| {
            h_precomp().vartime_multiscalar_mul([Scalar::from(amount), Scalar::from(1_u8)])
        })
}
